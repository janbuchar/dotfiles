#!/usr/bin/env python

import click
import logging
import os
import re
import subprocess
import sys
from itertools import islice, tee, groupby
from pathlib import Path
from urllib.parse import urlparse


PASS_DIR = Path(os.environ.get("PASSWORD_STORE_DIR", os.path.join(os.environ.get("HOME"), ".password-store")))


def pairs(iterator):
    return zip(iterator, iterator)


def run(*cmd):
    process = subprocess.run(cmd, stdout=subprocess.PIPE, check=True)
    output = re.sub(r'\x1B\[[0-?]*[ -/ ]*[@-~]', '', process.stdout.decode())  # Remove ANSI formatting
    return output.splitlines()


def alert(text):
    run("zenity", "--info", "--text=" + str(text))


def list_account_selection(choices, title, column_name):
    lookup = {str(path): account for path, account in choices}
    args = []

    for path, account in choices:
        args.append(str(path))
        args.append(account)

    result = run("zenity", "--width=600", "--height=400", "--list", "--title=Select account", "--column=Path", "--column=Account", *args)
    return result[0], lookup[result[0]]


def prepend(subject, prefix):
    if subject.startswith(prefix):
        return subject

    return prefix + subject


def send_command(command):
    with open(os.getenv("QUTE_FIFO", ""), "w") as out:
        out.write(command + "\n")


def lookup_url(request_url):
    request_url_parts = request_url.netloc.split(".")

    for path in PASS_DIR.glob("**/*"):
        if not path.is_file():
            continue

        if (PASS_DIR / ".git") in path.parents:
            continue

        path_login = path.stem
        path_url = path.parts[-2]

        for i in range(0, len(request_url_parts) - 1):
            matched_url_part = ".".join(request_url_parts[i:])
            if path_url == matched_url_part:
                yield path.relative_to(PASS_DIR).parent / path_login, path_login
                break


def fill_form(login, password):
    for input_selector in ("input[type=text]", "input[type=email]", "input:not([type])"):
        for attr_name in ("id", "name", "placeholder"):
            for attr_value in ("login", "mail", "user", "name"):
                selector = f"'{input_selector}[{attr_name}*={attr_value} i]'"
                send_command(f"jseval -q document.querySelector({selector}).value = '{login}';")
                send_command(f"jseval -q document.querySelector({selector}).dispatchEvent(new Event('input'));")

    send_command(f"jseval -q document.querySelector('input[type=password]').value = '{password}';")
    send_command(f"jseval -q document.querySelector('input[type=password]').dispatchEvent(new Event('input'));")
    send_command(f"jseval -q document.querySelector('input[type=password]').focus();")

@click.group()
def cli():
    pass


@cli.command()
def autofill():
    request_url = urlparse(os.getenv("QUTE_URL", ""))
    matches = list(lookup_url(request_url))

    choice = None

    if len(matches) == 0:
        pass
    elif len(matches) == 1:
        choice = matches[0]
    else:
        choice = list_account_selection(matches, "Select account", "Account name")

    if choice is not None:
        lines = run("pass", "show", choice[0])
        password = lines[0]
        fill_form(choice[1], password)
    else:
        alert("Nothing found")


if __name__ == "__main__":
    try:
        cli()
    except BaseException as e:
        if not type(e) == SystemExit:
            logging.exception("An exception occurred")
            alert(type(e).__name__ + ": " + str(e))
